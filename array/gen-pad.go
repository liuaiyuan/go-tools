// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package array

// Float32Pad 将指定数量的带有指定值的元素插入到数组中。
func Float32Pad(slice []float32, size int, val float32) []float32 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Float64Pad 将指定数量的带有指定值的元素插入到数组中。
func Float64Pad(slice []float64, size int, val float64) []float64 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// IntPad 将指定数量的带有指定值的元素插入到数组中。
func IntPad(slice []int, size int, val int) []int {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Int16Pad 将指定数量的带有指定值的元素插入到数组中。
func Int16Pad(slice []int16, size int, val int16) []int16 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Int32Pad 将指定数量的带有指定值的元素插入到数组中。
func Int32Pad(slice []int32, size int, val int32) []int32 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Int64Pad 将指定数量的带有指定值的元素插入到数组中。
func Int64Pad(slice []int64, size int, val int64) []int64 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Int8Pad 将指定数量的带有指定值的元素插入到数组中。
func Int8Pad(slice []int8, size int, val int8) []int8 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// UintPad 将指定数量的带有指定值的元素插入到数组中。
func UintPad(slice []uint, size int, val uint) []uint {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Uint16Pad 将指定数量的带有指定值的元素插入到数组中。
func Uint16Pad(slice []uint16, size int, val uint16) []uint16 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Uint32Pad 将指定数量的带有指定值的元素插入到数组中。
func Uint32Pad(slice []uint32, size int, val uint32) []uint32 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Uint64Pad 将指定数量的带有指定值的元素插入到数组中。
func Uint64Pad(slice []uint64, size int, val uint64) []uint64 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// Uint8Pad 将指定数量的带有指定值的元素插入到数组中。
func Uint8Pad(slice []uint8, size int, val uint8) []uint8 {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}

// StringPad 将指定数量的带有指定值的元素插入到数组中。
func StringPad(slice []string, size int, val string) []string {
	if size <= len(slice) {
		return slice
	}
	for i := 0; i < (size - len(slice)); i++ {
		slice = append(slice, val)
	}
	return slice
}
