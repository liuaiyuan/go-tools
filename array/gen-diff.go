// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package array

// Float32Diff 比较两个数组的值，并返回差集
func Float32Diff(slice1 []float32, slice2 []float32) (value []float32) {
	for _, v := range slice1 {
		if !Float32In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Float64Diff 比较两个数组的值，并返回差集
func Float64Diff(slice1 []float64, slice2 []float64) (value []float64) {
	for _, v := range slice1 {
		if !Float64In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// IntDiff 比较两个数组的值，并返回差集
func IntDiff(slice1 []int, slice2 []int) (value []int) {
	for _, v := range slice1 {
		if !IntIn(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Int16Diff 比较两个数组的值，并返回差集
func Int16Diff(slice1 []int16, slice2 []int16) (value []int16) {
	for _, v := range slice1 {
		if !Int16In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Int32Diff 比较两个数组的值，并返回差集
func Int32Diff(slice1 []int32, slice2 []int32) (value []int32) {
	for _, v := range slice1 {
		if !Int32In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Int64Diff 比较两个数组的值，并返回差集
func Int64Diff(slice1 []int64, slice2 []int64) (value []int64) {
	for _, v := range slice1 {
		if !Int64In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Int8Diff 比较两个数组的值，并返回差集
func Int8Diff(slice1 []int8, slice2 []int8) (value []int8) {
	for _, v := range slice1 {
		if !Int8In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// UintDiff 比较两个数组的值，并返回差集
func UintDiff(slice1 []uint, slice2 []uint) (value []uint) {
	for _, v := range slice1 {
		if !UintIn(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Uint16Diff 比较两个数组的值，并返回差集
func Uint16Diff(slice1 []uint16, slice2 []uint16) (value []uint16) {
	for _, v := range slice1 {
		if !Uint16In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Uint32Diff 比较两个数组的值，并返回差集
func Uint32Diff(slice1 []uint32, slice2 []uint32) (value []uint32) {
	for _, v := range slice1 {
		if !Uint32In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Uint64Diff 比较两个数组的值，并返回差集
func Uint64Diff(slice1 []uint64, slice2 []uint64) (value []uint64) {
	for _, v := range slice1 {
		if !Uint64In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// Uint8Diff 比较两个数组的值，并返回差集
func Uint8Diff(slice1 []uint8, slice2 []uint8) (value []uint8) {
	for _, v := range slice1 {
		if !Uint8In(v, slice2) {
			value = append(value, v)
		}
	}
	return
}

// StringDiff 比较两个数组的值，并返回差集
func StringDiff(slice1 []string, slice2 []string) (value []string) {
	for _, v := range slice1 {
		if !StringIn(v, slice2) {
			value = append(value, v)
		}
	}
	return
}
