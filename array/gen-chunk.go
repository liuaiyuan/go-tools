// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package array

// Float32Chunk 数组分割为新的数组块
func Float32Chunk(items []float32, size int) (chunks [][]float32) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Float64Chunk 数组分割为新的数组块
func Float64Chunk(items []float64, size int) (chunks [][]float64) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// IntChunk 数组分割为新的数组块
func IntChunk(items []int, size int) (chunks [][]int) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Int16Chunk 数组分割为新的数组块
func Int16Chunk(items []int16, size int) (chunks [][]int16) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Int32Chunk 数组分割为新的数组块
func Int32Chunk(items []int32, size int) (chunks [][]int32) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Int64Chunk 数组分割为新的数组块
func Int64Chunk(items []int64, size int) (chunks [][]int64) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Int8Chunk 数组分割为新的数组块
func Int8Chunk(items []int8, size int) (chunks [][]int8) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// UintChunk 数组分割为新的数组块
func UintChunk(items []uint, size int) (chunks [][]uint) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Uint16Chunk 数组分割为新的数组块
func Uint16Chunk(items []uint16, size int) (chunks [][]uint16) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Uint32Chunk 数组分割为新的数组块
func Uint32Chunk(items []uint32, size int) (chunks [][]uint32) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Uint64Chunk 数组分割为新的数组块
func Uint64Chunk(items []uint64, size int) (chunks [][]uint64) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// Uint8Chunk 数组分割为新的数组块
func Uint8Chunk(items []uint8, size int) (chunks [][]uint8) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}

// StringChunk 数组分割为新的数组块
func StringChunk(items []string, size int) (chunks [][]string) {

	for size < len(items) {
		items, chunks = items[size:], append(chunks, items[0:size:size])
	}

	return append(chunks, items)

}
